from pydantic import BaseModel


class ChromeVersion(BaseModel):
    major: int
    minor: int
    build: int
    patch: int

    @classmethod
    def from_string(cls, string: str):
        major, minor, build, patch = [int(part) for part in string.split(".")]
        return cls(major=major, minor=minor, build=build, patch=patch)

    @property
    def version(self):
        return f"{self.major}.{self.minor}.{self.build}.{self.patch}"

    def __gt__(self, other: "ChromeVersion") -> bool:
        if self.major > other.major:
            return True
        elif self.major == other.major and self.minor > other.minor:
            return True
        elif self.major == other.major and self.minor == other.minor and self.build > other.build:
            return True
        elif self.major == other.major and self.minor == other.minor and self.build == other.build and self.patch > other.patch:
            return True
        return False

    def __ge__(self, other: "ChromeVersion") -> bool:
        if self.major >= other.major:
            return True
        elif self.major == other.major and self.minor >= other.minor:
            return True
        elif self.major == other.major and self.minor == other.minor and self.build >= other.build:
            return True
        elif self.major == other.major and self.minor == other.minor and self.build == other.build and self.patch >= other.patch:
            return True
        return False

    def __le__(self, other: "ChromeVersion") -> bool:
        if self.major <= other.major:
            return True
        elif self.major == other.major and self.minor <= other.minor:
            return True
        elif self.major == other.major and self.minor == other.minor and self.build <= other.build:
            return True
        elif self.major == other.major and self.minor == other.minor and self.build == other.build and self.patch <= other.patch:
            return True
        return False

    def __lt__(self, other: "ChromeVersion") -> bool:
        if self.major < other.major:
            return True
        elif self.major == other.major and self.minor < other.minor:
            return True
        elif self.major == other.major and self.minor == other.minor and self.build < other.build:
            return True
        elif self.major == other.major and self.minor == other.minor and self.build == other.build and self.patch < other.patch:
            return True
        return False
