import json
from typing import Union, List, Dict
import re

import paramiko

from models.connection_info import ConnectionInfo

from vulnerabilities import vulnerabilities, Vulnerability


def load_json(file: str) -> Union[dict, list]:
    with open(file) as json_file:
        json_data = json.load(json_file)
    return json_data


def find_vulnerabilities(client_info: ConnectionInfo, client: paramiko.SSHClient) -> List[Vulnerability]:
    active_vulnerabilities = []
    for vulnerability in vulnerabilities:
        print(f"starting vulnerability check for {vulnerability.name}")
        is_vulnerable = vulnerability.check(client, client_info)
        if is_vulnerable:
            print(f"client {client_info.host} is vulnerable to {vulnerability.name}")
            active_vulnerabilities.append(vulnerability)
        else:
            print(f"vulnerability check passed on {client_info.host}")
    return active_vulnerabilities


def mitigate_vulnerability(active_vulnerabilities: List[Vulnerability], client_info: ConnectionInfo,
                           client: paramiko.SSHClient) -> List[Vulnerability]:
    unsuccessful_mitigations = []
    for vulnerability in active_vulnerabilities:
        if vulnerability.mitigation:
            print(f"mitigating {vulnerability.name}")
            success_status = vulnerability.mitigation(client, client_info)
            if not success_status:
                unsuccessful_mitigations.append(vulnerability)
                print(f"automatic mitigation failed on {client_info.host}, check client manually for solutions")
            else:
                print(f"client {client_info.host} is no longer vulnerable to {vulnerability.name}")
        else:
            print(f"no mitigation available for {vulnerability.name}")
    return unsuccessful_mitigations


if __name__ == '__main__':
    config = load_json('hosts.json')
    connection_info = [ConnectionInfo.model_validate(info) for info in config]
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    for client_info in connection_info:
        ssh_client.connect(hostname=client_info.host, username=client_info.username, password=client_info.password)
        print(f"checking for vulnerabilities in {client_info.host}")
        active_vulnerabilities = find_vulnerabilities(client_info, ssh_client)

        if active_vulnerabilities:
            mitigate_vulnerability(active_vulnerabilities, client_info, ssh_client)
            active_vulnerabilities = find_vulnerabilities(client_info, ssh_client)
            print(active_vulnerabilities)
